#!/bin/bash

#set -o errexit   # is more harmful than useful
                  # http://mywiki.wooledge.org/BashFAQ/105
                  # http://wiki.bash-hackers.org/scripting/obsolete
                  # https://github.com/yaccz/errexit-considered-harmful
#set -o nounset   # bad practice
set -o pipefail   # set the return value of a pipeline to the value of the rightmost
                  # command to exit with a non-zero status, or zero if all commands
                  # in the pipeline exit successfully.
shopt -s nullglob

readonly _SCRIPT_DIR="$( cd "$(dirname "$0")" && pwd -P )" || exit 1
_confirm=1
_verbose=0

for _lib in "$_SCRIPT_DIR"/lib/*.sh; do
    # shellcheck disable=SC1090
    . "$_lib" || exit 1
done
unset _lib

# parse args and output list of scripts to run
_parse_args() {
    local args=()

    while (( $# > 0 )); do
        case "$1" in
            -n|--noconfirm)
                _confirm=0
                ;;
            -v|--verbose)
                _verbose=1
                ;;
            --help|--*|-*)
                echo "Usage: $0 [OPTIONS] [SCRIPT...]" >&2
                echo "Options:" >&2
                echo " --help           show this message" >&2
                echo " -n, --noconfirm  do not ask for any confirmation" >&2
                echo " -v, --verbose    show the action that made no change" >&2
                return 1
                ;;
            *)
                args+=("$1")
                ;;
        esac
        shift
    done

    if (( ${#args[@]} == 0 )); then
        local script
        for script in "$_SCRIPT_DIR"/*.df.sh "$_SCRIPT_DIR"/*/main.df.sh; do
            echo "$script"
        done
    else
        local arg
        for arg in "${args[@]}"; do
            local arg_full="$_SCRIPT_DIR/$arg"

            local script
            if [[ -e $arg_full/main.df.sh ]]; then
                script="$arg_full/main.df.sh"
            else
                script="${arg_full}.df.sh"
            fi

            if [[ ! -e $script ]]; then
                echo "error: script $script not found" >&2
                return 1
            fi

            echo "$script"
        done
    fi
}

#output name of script $1
_get_script_name() {
    if [[ $1 =~ /main\.df\.sh$ ]]; then
        basename "$(dirname "$1")"
    else
        echo "${1%.df.sh}"
    fi
}

_parse_args "$@" | while IFS= read -r _script; do
    _script_name=$(_get_script_name "$_script") || exit 1

    # shellcheck disable=SC1090
    (cd "$(dirname "$_script")" && . "$_script") || exit 1
done || exit 1
