#!/bin/bash
# dotfiles
# Copyright (C) 2017  Kazutoshi Noguchi
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#set -o errexit   # is more harmful than useful
                  # http://mywiki.wooledge.org/BashFAQ/105
                  # http://wiki.bash-hackers.org/scripting/obsolete
                  # https://github.com/yaccz/errexit-considered-harmful
#set -o nounset   # bad practice
set -o pipefail   # set the return value of a pipeline to the value of the rightmost
                  # command to exit with a non-zero status, or zero if all commands
                  # in the pipeline exit successfully.
shopt -s nullglob

#absolute path to the directory of this script
readonly _SCRIPT_DIR="$( cd "$(dirname "$0")" && pwd -P )" || exit 1
_dry_run=0    #perform a trial run with no changes made if this is true
_verbose=0    #show the action that made no change if this is true
_script_name= #name of currely running script
_changed=0    #whether last action was changed the system or not

is_dry_run() {
    (( _dry_run ))
}

reset_changed() {
    _changed=0
}

is_changed() {
    (( _changed ))
}

flag_changed() {
    _changed=1
}

for _lib in "$_SCRIPT_DIR"/lib/*.sh; do
    # shellcheck disable=SC1090
    . "$_lib" || exit 1
done
unset _lib

# join $2.. with $1.
_join() {
    local ifs_old=$IFS
    IFS=$1
    shift
    echo "$*"
    IFS=$ifs_old
}

# parse non-option parameters and output list of a absolute path to scripts to run
_parse_targets() {
    if (( $# == 0 )); then
        local script
        for script in *.df.sh */main.df.sh; do
            echo "$(pwd -P)/$script"
        done
    else
        local scripts=()
        local arg
        for arg in "$@"; do
            local script
            if [[ -e $arg/main.df.sh ]]; then
                script="$arg/main.df.sh"
            elif [[ -e ${arg}.df.sh ]]; then
                script="${arg}.df.sh"
            else
                script=$arg
            fi

            if [[ ! -e $script ]]; then
                echo "error: script $script not found" >&2
                return 1
            fi

            scripts+=("$(pwd -P)/$script")
        done

        _join $'\n' "${scripts[@]}"
    fi
}

#output name of script $1
_get_script_name() {
    if [[ $1 =~ /main\.df\.sh$ ]]; then
        basename "$(dirname "$1")"
    else
        local filename
        filename=$(basename "$1")
        echo "${filename%.df.sh}"
    fi
}

#show usage
_usage() {
    cat <<EOF
Usage: $0 [OPTIONS]... [SCRIPT]...
Options:
  -h, --help            display this help and exit
  -n, --dry-run         perform a trial run with no changes made
  -v, --verbose         show the action that made no change
EOF
}

getopt --test >/dev/null 2>&1
if [[ $? -ne 4 ]]; then
    echo "This script needs util-linux version of getopt."
    exit 1
fi

if ! _temp=$(getopt --name "$0" --options "hnv" --longoptions "help,dry-run,verbose" -- "$@"); then
    _usage
    exit 1
fi

eval set -- "$_temp"
unset _temp

while :; do
    case "$1" in
        -h|--help)
            _usage
            exit 0
            ;;
        -n|--dry-run)
            _dry_run=1
            shift
            ;;
        -v|--verbose)
            _verbose=1
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

# dup stdin to fd 3
exec 3<&0

_parse_targets "$@" | while IFS= read -r _script; do
    _script_name=$(_get_script_name "$_script") || exit 1

    # shellcheck disable=SC1090
    (cd "$(dirname "$_script")" && . "$_script") <&3 || exit 1
done || exit 1

# close fd 3
exec 3<&-

if [[ -t 1 ]] && (( ! _verbose )) && ! is_changed; then
    #print newline to avoid that the shell prompt overwrite the output
    echo
fi
