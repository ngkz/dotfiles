[devshell]
# This is the name of your environment. It should usually map to the project
# name.
name = "dotfiles"

# Message Of The Day (MOTD) is displayed when entering the environment with an
# interactive shell. By default it will show the project name.
#
# motd = ""

# Add packages from nixpkgs here. Use `nix search nixpkgs <term>` to find the
# package that you need.
#
# NOTE: don't forget to put commas between items! :)
packages = [
  "nixpkgs-fmt",
  "nix-prefetch-github",
  "nix-prefetch-git",
  "nodePackages.node2nix",
  "prefetch-yarn-deps",
  "nvd",
  "agenix",
  "libsecret",
  "nix-output-monitor"
]

# Declare commands that are available in the environment.
[[commands]]
name = "format"
command = 'nixpkgs-fmt "$PRJ_ROOT"'

[[commands]]
package = "age"
category = "secret management"

[[commands]]
help = "manage age-encrypted secrets"
name = "agenix-keepass"
command = '''
need_identity=
for arg in "$@"; do
    if [ "$arg" = "-e" ] || [ "$arg" = "-r" ] || [ "$arg" = "-d" ]; then
        need_identity=1
    fi
done
if [ "$need_identity" ]; then
    identity=$(mktemp -t age.XXXXXXXX)
    trap "rm -f $identity" EXIT
    if ! secret-tool lookup agenix "${HOST:-$(hostname)}" > "$identity"; then
      echo "error: couldn't lookup secret key" >&2
      exit 1
    fi
    agenix -i "$identity" "$@"
else
    shift
    agenix "$@"
fi
'''
category = "secret management"

[[commands]]
package = "nix-prefetch-git"

[[commands]]
package = "nix-prefetch-github"

[[commands]]
package = "prefetch-yarn-deps"

[[commands]]
package = "nodePackages.node2nix"

[[commands]]
package = "nvd"

[[commands]]
help = "Update all flake inputs and packages"
name = "update"
command = '${PRJ_ROOT}/update.sh'
category = "system maintenance"

[[commands]]
help = "Build and activate the new configuration"
name = "switch"
command = '''
prev=$(readlink /run/current-system)
sudo sh -c "nixos-rebuild switch --flake '${PRJ_ROOT}#' --log-format internal-json -v \"\$@\" |& nom --json" -- "$@"
nvd diff "$prev" /run/current-system
'''
category = "system maintenance"

[[commands]]
help = "Build and activate the new configuration on the remote machine"
name = "switch-remote"
command = '''
host=$1
shift
nixos-rebuild switch --flake "${PRJ_ROOT}#$host" --target-host "root@$host" --log-format internal-json -v "$@" |& nom --json
'''
category = "system maintenance"

[[commands]]
help = "Build the new configuration and activate it on next reboot"
name = "boot"
command = '''
sudo sh -c "nixos-rebuild boot --flake '${PRJ_ROOT}#' --log-format internal-json -v \"\$@\" |& nom --json" -- "$@"
'''
category = "system maintenance"

[[commands]]
help = "Build the new configuration and activate it on next reboot"
name = "boot-remote"
command = '''
host=$1
shift
nixos-rebuild boot --flake "${PRJ_ROOT}#$host" --target-host "root@$host" --log-format internal-json -v "$@" |& nom --json
'''
category = "system maintenance"

[[commands]]
help = "Build the new configuration and activate it but it reverts automatically on next reboot. reboot after 15mins if sshd dies during update"
name = "test-remote-safe"
command = '''
host=$1
shift
build "$host" --no-link
ssh root@$host shutdown -r +15
nixos-rebuild test --flake "${PRJ_ROOT}#$host" --target-host "root@$host" "$@"
ssh root@$host shutdown -c
'''
category = "system maintenance"

[[commands]]
help = "Build the new configuration, but neither activate it nor add it to the boot menu. It leaves a symlink result that points to the system derivation."
name = "build"
command = '''
host=${1:-$(hostname)}
shift || true
if [ $(nix eval --json --impure --expr "(builtins.getFlake \"$PRJ_ROOT\").nixosConfigurations ? $host") = true ]; then
  nom build "${PRJ_ROOT}#nixosConfigurations.${host}.config.system.build.toplevel" "$@"
elif [ $(nix eval --json --impure --expr "(builtins.getFlake \"$PRJ_ROOT\").homeConfigurations ? $host") = true ]; then
  nom build "${PRJ_ROOT}#homeConfigurations.${host}.activationPackage" "$@"
else
  echo "no configuration: $host"
fi
'''
category = "system maintenance"

[[commands]]
help = "Build the new configuration, but neither activate it, nor add it to the boot menu, nor leave a symlink."
name = "dry-build"
command = '''
host=${1:-$(hostname)}
shift || true
build "$host" --no-link "$@"
'''
category = "system maintenance"

[[commands]]
help = "Start a REPL with dotfiles preloaded"
name = "repl"
command = 'nix repl --file "${PRJ_ROOT}/repl.nix"'
category = "system maintenance"

[[commands]]
help = "Roll back to the previous configuration"
name = "rollback"
command = 'sudo nixos-rebuild switch --flake "${PRJ_ROOT}#" --rollback "$@"'
category = "system maintenance"

[[commands]]
help = "List versions of the configuration"
name = "generations"
command = 'nixos-rebuild list-generations --flake "${PRJ_ROOT}#"'
category = "system maintenance"

[[commands]]
help = "Show the difference between each version of a configuration"
name = "diff-generations"
command = "nix profile diff-closures --profile /nix/var/nix/profiles/system"
category = "system maintenance"

[[commands]]
help = "Find out where dependencies come from"
name = "why-system-depends"
command = 'nix why-depends .#nixosConfigurations.$(hostname).config.system.build.toplevel "$@"'
category = "system maintenance"

[[commands]]
help = "Create and start libvirt VM"
name = "create-vm"
command = '''
host=$1
shift
nix shell ".#nixosConfigurations.${host}.config.system.build.libvirtVM" -c "create-libvirt-vm-${host}" "$@"
'''
category = "VM"

[[commands]]
help = "Shutdown and destroy libvirt VM"
name = "destroy-vm"
command = 'nix shell ".#nixosConfigurations.$1.config.system.build.libvirtVM" -c "destroy-libvirt-vm-$1"'
category = "VM"

[[commands]]
help = "SSH into the libvirt VM"
name = "ssh-vm"
command = '''
host=$1
shift
nix shell ".#nixosConfigurations.${host}.config.system.build.libvirtVM" -c "ssh-libvirt-vm-${host}" "$@"
'''
category = "VM"

[[commands]]
help = "Build and activate the new configuration of libvirt VM"
name = "switch-vm"
command = '''
host=$1
shift
nix shell "$@" ".#nixosConfigurations.${host}.config.system.build.libvirtVM" -c "switch-libvirt-vm-${host}"
'''
category = "VM"
