[devshell]
# This is the name of your environment. It should usually map to the project
# name.
name = "dotfiles"

# Message Of The Day (MOTD) is displayed when entering the environment with an
# interactive shell. By default it will show the project name.
#
# motd = ""

# Add packages from nixpkgs here. Use `nix search nixpkgs <term>` to find the
# package that you need.
#
# NOTE: don't forget to put commas between items! :)
packages = [
  "nixpkgs-fmt",
  "nix-prefetch-github",
  "nix-prefetch-git",
  "nodePackages.node2nix",
  "prefetch-yarn-deps",
  "nvd",
  "agenix",
  "libsecret"
]

# Declare commands that are available in the environment.
[[commands]]
name = "format"
command = 'nixpkgs-fmt "$PRJ_ROOT"'

[[commands]]
package = "rage"
category = "secret management"

[[commands]]
help = "manage age-encrypted secrets"
name = "agenix-keepass"
command = '''
need_identity=
for arg in "$@"; do
    if [ "$arg" = "-e" ] || [ "$arg" = "-r" ]; then
        need_identity=1
    fi
done
if [ "$need_identity" ]; then
    identity=$(mktemp -t age.XXXXXXXX)
    trap "rm -f $identity" EXIT
    secret-tool lookup agenix client > "$identity"
    agenix -i "$identity" "$@"
else
    agenix "$@"
fi
'''
category = "secret management"

[[commands]]
package = "nix-prefetch-git"

[[commands]]
package = "nix-prefetch-github"

[[commands]]
package = "prefetch-yarn-deps"

[[commands]]
package = "nodePackages.node2nix"

[[commands]]
package = "nvd"

[[commands]]
help = "Update all flake inputs and packages"
name = "update"
command = '${PRJ_ROOT}/update.sh'
category = "system maintenance"

[[commands]]
help = "Build and activate the new configuration"
name = "switch"
command = '''
prev=$(readlink /run/current-system)
sudo nixos-rebuild switch --flake "${PRJ_ROOT}#" "$@"
nvd diff "$prev" /run/current-system
'''
category = "system maintenance"

[[commands]]
help = "Build the new configuration, but neither activate it nor add it to the boot menu. It leaves a symlink result that points to the system derivation."
name = "build"
command = 'nix build "${PRJ_ROOT}#nixosConfigurations.$(hostname).config.system.build.toplevel"'
category = "system maintenance"

[[commands]]
help = "Build the new configuration, but neither activate it, nor add it to the boot menu, nor leave a symlink."
name = "dry-build"
command = 'nix build "${PRJ_ROOT}#nixosConfigurations.$(hostname).config.system.build.toplevel" --no-link'
category = "system maintenance"

[[commands]]
help = "Start a REPL with dotfiles preloaded"
name = "repl"
command = 'nix repl "${PRJ_ROOT}/repl.nix"'
category = "system maintenance"

[[commands]]
help = "Remove old configurations"
name = "clean"
command = '''
# Delete configurations older than last 5 generations.
sudo nix-env --delete-generations +5 --profile /nix/var/nix/profiles/system
# Rebuild the boot menu and regenerate secrets
sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
'''
category = "system maintenance"


[[commands]]
help = "Remove old configurations and perform garbage collection"
name = "deepclean"
command = '''
# Delete all auto gc roots
sudo rm /nix/var/nix/gcroots/auto/*
# Delete configurations older than last 5 generations.
sudo nix-env --delete-generations +5 --profile /nix/var/nix/profiles/system
# Perform garbage collection the store
nix store gc
# Replace identical files in the store by hard links
nix store optimise
# Rebuild the boot menu and regenerate secrets
sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
'''
category = "system maintenance"

[[commands]]
help = "Roll back to the previous configuration"
name = "rollback"
command = 'sudo nixos-rebuild switch --flake "${PRJ_ROOT}#" --rollback "$@"'
category = "system maintenance"

[[commands]]
help = "List versions of the configuration"
name = "generations"
command = "sudo nix-env --profile /nix/var/nix/profiles/system --list-generations"
category = "system maintenance"

[[commands]]
help = "show the difference between each version of a configuration"
name = "diff-generations"
command = "nix profile diff-closures --profile /nix/var/nix/profiles/system"
category = "system maintenance"

[[commands]]
help = "find out where dependencies come from"
name = "why-system-depends"
command = 'nix why-depends .#nixosConfigurations.$(hostname).config.system.build.toplevel "$@"'
category = "system maintenance"
