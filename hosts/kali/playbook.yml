# -*- mode: yaml; eval: (ansible 1); -*-
# vim: ft=ansible

- hosts: all
  become: yes
  vars:
    ansible_become_password: vagrant
    locale: en_US.UTF-8
  tasks:
    - name: upgrade the system
      apt: update_cache=yes upgrade=yes autoclean=yes autoremove=yes
      tags: update

    - name: check current locale
      slurp: src=/etc/locale.conf
      become: no
      register: cur_locale
      changed_when: (cur_locale.content | b64decode).strip() != "LANG=" + locale

    - name: Ensure localisation files for '{{ locale }}' are available
      locale_gen:
        name: "{{ locale }}"
        state: present
      when: cur_locale is changed

    - name: Set locale to '{{ locale }}'
      become: yes
      command: localectl set-locale LANG={{ locale }}
      when: cur_locale is changed

    - name: set timezone to Asia/Tokyo
      timezone: name=Asia/Tokyo

    - name: set keyboard layout
      copy: src=keyboard dest=/etc/default/keyboard
      register: keyboard

    - name: reload keyboard config
      command: udevadm trigger --subsystem-match=input --action=change
      when: keyboard is changed

    - name: update /etc/hosts hostname line
      lineinfile:
        path: /etc/hosts
        regexp: '^127.0.1.1'
        line: "127.0.1.1\t{{ ansible_hostname }}"

    - name: install kali packages
      apt: name={{ item }}
      with_items:
        - docker.io
        - qemu-user-static
        - build-essential
        - binutils
        - gcc
        - gcc-arm-linux-gnueabi
        - g++-arm-linux-gnueabi
        - gcc-arm-linux-gnueabihf
        - g++-arm-linux-gnueabihf
        - gcc-aarch64-linux-gnu
        - g++-aarch64-linux-gnu
        - gcc-powerpc-linux-gnu
        - g++-powerpc-linux-gnu
        - gcc-powerpc64le-linux-gnu
        - g++-powerpc64le-linux-gnu
        - gcc-riscv64-linux-gnu
        - g++-riscv64-linux-gnu
        - gcc-mingw-w64
        - g++-mingw-w64
        - libc6-dbg
        # nix packages are broken
        - dnsmap
        - dnsrecon
        # no nix package
        - dnscat2

        # im
        - fcitx5-frontend-all

    - name: disable screen lock
      xfconf: channel=xfce4-power-manager property={{ item.property }} value_type={{ item.value_type }} value={{ item.value }}
      with_items:
        - property: /xfce4-power-manager/dpms-enabled
          value_type: bool
          value: 'false'
        - property: /xfce4-power-manager/blank-on-ac
          value_type: int
          value: 0
      become: no

    - name: add vagrant user to docker group
      user: name=vagrant groups=docker append=yes

    - name: install nix
      shell: sh <(curl -L https://nixos.org/nix/install) --daemon --yes
      args:
        creates: /nix
        executable: bash

    - name: enable nix command and flake
      lineinfile:
        path: /etc/nix/nix.conf
        regexp: '^experimental-features ='
        line: 'experimental-features = nix-command flakes'

    - name: set trusted-users
      lineinfile:
        path: /etc/nix/nix.conf
        regexp: '^trusted-users ='
        line: 'trusted-users = vagrant root'
      register: trusted_users

    - name: import nix environment variables when ssh <command> (obsolete)
      lineinfile:
        path: /etc/zsh/zshenv
        line: '. /etc/profile.d/nix.sh'
        state: absent

    - name: import nix environment variables when ssh <command>
      lineinfile:
        path: /etc/zsh/zshenv
        line: '[[ ! -o interactive ]] && . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
        state: present

    - name: calculate NIX_PATH
      local_action:
        module: command
        cmd: "nix eval --raw --impure --expr 'let inputs = (builtins.getFlake (toString ../..)).inputs; in with builtins; with inputs.nixpkgs.lib; concatStringsSep \":\" (mapAttrsToList (n: v: \"${n}=${v}\") (filterAttrs (n: _: n != \"self\") inputs))'"
      become: no
      changed_when: no
      register: nix_path

    - name: pin NIX_PATH
      lineinfile:
        path: /etc/environment
        regexp: '^NIX_PATH='
        line: 'NIX_PATH={{ nix_path.stdout }}'

    - name: generate registry.json
      local_action:
        module: command
        cmd: "nix eval --json --impure --expr 'let inputs = (builtins.getFlake (toString ../..)).inputs; registry = {}; in { version = 2; flakes = inputs.nixpkgs.lib.mapAttrsToList (n: v: { from = { \"type\" = \"indirect\"; id = n; }; to = { type = \"path\"; path = v.outPath; } // inputs.nixpkgs.lib.filterAttrs (n: _: n == \"lastModified\" || n == \"rev\" || n == \"revCount\" || n == \"narHash\") v; exact = true; }) inputs; }'"
      become: no
      changed_when: no
      register: registry_json

    - name: pin nix flakes
      copy: content="{{ registry_json.stdout }}" dest=/etc/nix/registry.json

    - name: keep PATH when sudo
      lineinfile: path=/etc/sudoers regexp='^(Defaults\s*secure_path=.*)' line='# \1' backrefs=yes

    - name: remove default nix channel
      command: nix-channel --remove nixpkgs
      register: channel_rm
      changed_when: "\"uninstalling 'nixpkgs'\" in channel_rm.stdout"

    - name: update nix
      shell: |
        set -euo pipefail
        nix_pkg_expect=$(nix eval --raw nixpkgs#nix)
        if ! nix profile list | grep -Fq "$nix_pkg_expect"; then
          nix_pkg_installed=$(dirname $(dirname $(realpath $(command -v nix))))
          del=()
          idx=
          while read -r line; do
            if [[ $line =~ Index:.*([0-9]+) ]]; then
              idx=${BASH_REMATCH[1]}
            elif [[ $line = "Store paths:"* ]] && [[ $line =~ .*(/nix/store/[^[:space:]]*-nix-[^[:space:]]*) ]]; then
              if [[ -n "$idx" ]]; then
                del+=("$idx")
                idx=
              else
                del+=("${BASH_REMATCH[1]}")
              fi
            fi
          done < <(nix profile list)
          nix profile remove "${del[@]}"
          "${nix_pkg_installed}/bin/nix" profile install nixpkgs#nix
          exit 10
        fi
      args:
        executable: /bin/bash
      register: nix_update
      changed_when: nix_update.rc == 10
      failed_when: nix_update.rc != 10 and nix_update.rc != 0

    - name: restart nix
      systemd: daemon_reload=yes name=nix-daemon state=restarted
      when: nix_update is changed or trusted_users is changed

    - name: get current home-manager profile
      stat: path=~/.local/state/home-manager/gcroots/current-home
      become: no
      register: cur_profile
      tags: hm

    - name: build home-manager profile locally and copy to vm
      local_action:
        module: shell
        cmd: |
          set -euo pipefail
          cur_profile={{ cur_profile.stat.lnk_target|default("undefined") }}
          if [ "$cur_profile" != "$(nix eval --raw ../..#homeConfigurations.kali.activationPackage)" ]; then
            new_profile=$(nix build --no-link --print-out-paths ../..#homeConfigurations.kali.activationPackage)

            CONFIG=$(mktemp)
            trap 'rm -f "$CONFIG"' EXIT
            vagrant ssh-config >"$CONFIG"
            export NIX_SSHOPTS="-F $CONFIG"
            nix-copy-closure --to default "$new_profile" >/dev/null

            echo "$new_profile"
          fi
      become: no
      changed_when: new_profile.stdout != ''
      when: ansible_connection != 'local'
      register: new_profile
      tags: hm

    - name: activate home-manager profile
      command: "{{ new_profile.stdout }}/activate"
      become: no
      when: ansible_connection != 'local' and new_profile is changed
      tags: hm

    - name: build home-manager profile in vm and activate
      shell: nix run home-manager -- switch --flake "../../#kali"
      become: no
      when: ansible_connection == 'local'
      register: new_profile
      tags: hm

    - name: add home-manager zsh to /etc/shells
      lineinfile: path=/etc/shells line=/home/vagrant/.nix-profile/bin/zsh

    - name: use home-manager zsh
      user: user=vagrant shell=/home/vagrant/.nix-profile/bin/zsh

    - name: wipe old profiles (user)
      command: nix-env --delete-generations old
      changed_when: no
      become: no
      tags: clean

    - name: wipe old profiles (root) and run GC
      command: nix-collect-garbage --delete-old
      changed_when: no
      tags: clean

    - name: optimise nix store
      command: nix store optimise
      changed_when: no
      tags: clean
